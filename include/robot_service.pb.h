// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robot_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_robot_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_robot_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "std_msgs.pb.h"
#include "nav_msgs.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_robot_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_robot_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_robot_5fservice_2eproto;
namespace robot_service {
class Float32Request;
struct Float32RequestDefaultTypeInternal;
extern Float32RequestDefaultTypeInternal _Float32Request_default_instance_;
class Float32Response;
struct Float32ResponseDefaultTypeInternal;
extern Float32ResponseDefaultTypeInternal _Float32Response_default_instance_;
class PoseRequest;
struct PoseRequestDefaultTypeInternal;
extern PoseRequestDefaultTypeInternal _PoseRequest_default_instance_;
class PoseResponse;
struct PoseResponseDefaultTypeInternal;
extern PoseResponseDefaultTypeInternal _PoseResponse_default_instance_;
}  // namespace robot_service
PROTOBUF_NAMESPACE_OPEN
template<> ::robot_service::Float32Request* Arena::CreateMaybeMessage<::robot_service::Float32Request>(Arena*);
template<> ::robot_service::Float32Response* Arena::CreateMaybeMessage<::robot_service::Float32Response>(Arena*);
template<> ::robot_service::PoseRequest* Arena::CreateMaybeMessage<::robot_service::PoseRequest>(Arena*);
template<> ::robot_service::PoseResponse* Arena::CreateMaybeMessage<::robot_service::PoseResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace robot_service {

// ===================================================================

class Float32Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:robot_service.Float32Request) */ {
 public:
  inline Float32Request() : Float32Request(nullptr) {}
  ~Float32Request() override;
  explicit constexpr Float32Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Float32Request(const Float32Request& from);
  Float32Request(Float32Request&& from) noexcept
    : Float32Request() {
    *this = ::std::move(from);
  }

  inline Float32Request& operator=(const Float32Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Float32Request& operator=(Float32Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Float32Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Float32Request* internal_default_instance() {
    return reinterpret_cast<const Float32Request*>(
               &_Float32Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Float32Request& a, Float32Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Float32Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Float32Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Float32Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Float32Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Float32Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Float32Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Float32Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "robot_service.Float32Request";
  }
  protected:
  explicit Float32Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFloatDataFieldNumber = 1,
  };
  // .robot_service.Float32 float_data = 1;
  bool has_float_data() const;
  private:
  bool _internal_has_float_data() const;
  public:
  void clear_float_data();
  const ::robot_service::Float32& float_data() const;
  PROTOBUF_NODISCARD ::robot_service::Float32* release_float_data();
  ::robot_service::Float32* mutable_float_data();
  void set_allocated_float_data(::robot_service::Float32* float_data);
  private:
  const ::robot_service::Float32& _internal_float_data() const;
  ::robot_service::Float32* _internal_mutable_float_data();
  public:
  void unsafe_arena_set_allocated_float_data(
      ::robot_service::Float32* float_data);
  ::robot_service::Float32* unsafe_arena_release_float_data();

  // @@protoc_insertion_point(class_scope:robot_service.Float32Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::robot_service::Float32* float_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PoseRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:robot_service.PoseRequest) */ {
 public:
  inline PoseRequest() : PoseRequest(nullptr) {}
  ~PoseRequest() override;
  explicit constexpr PoseRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PoseRequest(const PoseRequest& from);
  PoseRequest(PoseRequest&& from) noexcept
    : PoseRequest() {
    *this = ::std::move(from);
  }

  inline PoseRequest& operator=(const PoseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoseRequest& operator=(PoseRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PoseRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PoseRequest* internal_default_instance() {
    return reinterpret_cast<const PoseRequest*>(
               &_PoseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PoseRequest& a, PoseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PoseRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PoseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PoseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PoseRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PoseRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PoseRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoseRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "robot_service.PoseRequest";
  }
  protected:
  explicit PoseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 1,
  };
  // .robot_service.Pose pose = 1;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::robot_service::Pose& pose() const;
  PROTOBUF_NODISCARD ::robot_service::Pose* release_pose();
  ::robot_service::Pose* mutable_pose();
  void set_allocated_pose(::robot_service::Pose* pose);
  private:
  const ::robot_service::Pose& _internal_pose() const;
  ::robot_service::Pose* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::robot_service::Pose* pose);
  ::robot_service::Pose* unsafe_arena_release_pose();

  // @@protoc_insertion_point(class_scope:robot_service.PoseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::robot_service::Pose* pose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Float32Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:robot_service.Float32Response) */ {
 public:
  inline Float32Response() : Float32Response(nullptr) {}
  ~Float32Response() override;
  explicit constexpr Float32Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Float32Response(const Float32Response& from);
  Float32Response(Float32Response&& from) noexcept
    : Float32Response() {
    *this = ::std::move(from);
  }

  inline Float32Response& operator=(const Float32Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Float32Response& operator=(Float32Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Float32Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Float32Response* internal_default_instance() {
    return reinterpret_cast<const Float32Response*>(
               &_Float32Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Float32Response& a, Float32Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Float32Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Float32Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Float32Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Float32Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Float32Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Float32Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Float32Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "robot_service.Float32Response";
  }
  protected:
  explicit Float32Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFloatDataFieldNumber = 1,
  };
  // .robot_service.Float32 float_data = 1;
  bool has_float_data() const;
  private:
  bool _internal_has_float_data() const;
  public:
  void clear_float_data();
  const ::robot_service::Float32& float_data() const;
  PROTOBUF_NODISCARD ::robot_service::Float32* release_float_data();
  ::robot_service::Float32* mutable_float_data();
  void set_allocated_float_data(::robot_service::Float32* float_data);
  private:
  const ::robot_service::Float32& _internal_float_data() const;
  ::robot_service::Float32* _internal_mutable_float_data();
  public:
  void unsafe_arena_set_allocated_float_data(
      ::robot_service::Float32* float_data);
  ::robot_service::Float32* unsafe_arena_release_float_data();

  // @@protoc_insertion_point(class_scope:robot_service.Float32Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::robot_service::Float32* float_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PoseResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:robot_service.PoseResponse) */ {
 public:
  inline PoseResponse() : PoseResponse(nullptr) {}
  ~PoseResponse() override;
  explicit constexpr PoseResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PoseResponse(const PoseResponse& from);
  PoseResponse(PoseResponse&& from) noexcept
    : PoseResponse() {
    *this = ::std::move(from);
  }

  inline PoseResponse& operator=(const PoseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoseResponse& operator=(PoseResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PoseResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PoseResponse* internal_default_instance() {
    return reinterpret_cast<const PoseResponse*>(
               &_PoseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PoseResponse& a, PoseResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PoseResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PoseResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PoseResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PoseResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PoseResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PoseResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoseResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "robot_service.PoseResponse";
  }
  protected:
  explicit PoseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 1,
  };
  // .robot_service.Pose pose = 1;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::robot_service::Pose& pose() const;
  PROTOBUF_NODISCARD ::robot_service::Pose* release_pose();
  ::robot_service::Pose* mutable_pose();
  void set_allocated_pose(::robot_service::Pose* pose);
  private:
  const ::robot_service::Pose& _internal_pose() const;
  ::robot_service::Pose* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::robot_service::Pose* pose);
  ::robot_service::Pose* unsafe_arena_release_pose();

  // @@protoc_insertion_point(class_scope:robot_service.PoseResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::robot_service::Pose* pose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Float32Request

// .robot_service.Float32 float_data = 1;
inline bool Float32Request::_internal_has_float_data() const {
  return this != internal_default_instance() && float_data_ != nullptr;
}
inline bool Float32Request::has_float_data() const {
  return _internal_has_float_data();
}
inline const ::robot_service::Float32& Float32Request::_internal_float_data() const {
  const ::robot_service::Float32* p = float_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::robot_service::Float32&>(
      ::robot_service::_Float32_default_instance_);
}
inline const ::robot_service::Float32& Float32Request::float_data() const {
  // @@protoc_insertion_point(field_get:robot_service.Float32Request.float_data)
  return _internal_float_data();
}
inline void Float32Request::unsafe_arena_set_allocated_float_data(
    ::robot_service::Float32* float_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(float_data_);
  }
  float_data_ = float_data;
  if (float_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:robot_service.Float32Request.float_data)
}
inline ::robot_service::Float32* Float32Request::release_float_data() {
  
  ::robot_service::Float32* temp = float_data_;
  float_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::robot_service::Float32* Float32Request::unsafe_arena_release_float_data() {
  // @@protoc_insertion_point(field_release:robot_service.Float32Request.float_data)
  
  ::robot_service::Float32* temp = float_data_;
  float_data_ = nullptr;
  return temp;
}
inline ::robot_service::Float32* Float32Request::_internal_mutable_float_data() {
  
  if (float_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::robot_service::Float32>(GetArenaForAllocation());
    float_data_ = p;
  }
  return float_data_;
}
inline ::robot_service::Float32* Float32Request::mutable_float_data() {
  ::robot_service::Float32* _msg = _internal_mutable_float_data();
  // @@protoc_insertion_point(field_mutable:robot_service.Float32Request.float_data)
  return _msg;
}
inline void Float32Request::set_allocated_float_data(::robot_service::Float32* float_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(float_data_);
  }
  if (float_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(float_data));
    if (message_arena != submessage_arena) {
      float_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, float_data, submessage_arena);
    }
    
  } else {
    
  }
  float_data_ = float_data;
  // @@protoc_insertion_point(field_set_allocated:robot_service.Float32Request.float_data)
}

// -------------------------------------------------------------------

// PoseRequest

// .robot_service.Pose pose = 1;
inline bool PoseRequest::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool PoseRequest::has_pose() const {
  return _internal_has_pose();
}
inline const ::robot_service::Pose& PoseRequest::_internal_pose() const {
  const ::robot_service::Pose* p = pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::robot_service::Pose&>(
      ::robot_service::_Pose_default_instance_);
}
inline const ::robot_service::Pose& PoseRequest::pose() const {
  // @@protoc_insertion_point(field_get:robot_service.PoseRequest.pose)
  return _internal_pose();
}
inline void PoseRequest::unsafe_arena_set_allocated_pose(
    ::robot_service::Pose* pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:robot_service.PoseRequest.pose)
}
inline ::robot_service::Pose* PoseRequest::release_pose() {
  
  ::robot_service::Pose* temp = pose_;
  pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::robot_service::Pose* PoseRequest::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:robot_service.PoseRequest.pose)
  
  ::robot_service::Pose* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::robot_service::Pose* PoseRequest::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::robot_service::Pose>(GetArenaForAllocation());
    pose_ = p;
  }
  return pose_;
}
inline ::robot_service::Pose* PoseRequest::mutable_pose() {
  ::robot_service::Pose* _msg = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:robot_service.PoseRequest.pose)
  return _msg;
}
inline void PoseRequest::set_allocated_pose(::robot_service::Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose));
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:robot_service.PoseRequest.pose)
}

// -------------------------------------------------------------------

// Float32Response

// .robot_service.Float32 float_data = 1;
inline bool Float32Response::_internal_has_float_data() const {
  return this != internal_default_instance() && float_data_ != nullptr;
}
inline bool Float32Response::has_float_data() const {
  return _internal_has_float_data();
}
inline const ::robot_service::Float32& Float32Response::_internal_float_data() const {
  const ::robot_service::Float32* p = float_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::robot_service::Float32&>(
      ::robot_service::_Float32_default_instance_);
}
inline const ::robot_service::Float32& Float32Response::float_data() const {
  // @@protoc_insertion_point(field_get:robot_service.Float32Response.float_data)
  return _internal_float_data();
}
inline void Float32Response::unsafe_arena_set_allocated_float_data(
    ::robot_service::Float32* float_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(float_data_);
  }
  float_data_ = float_data;
  if (float_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:robot_service.Float32Response.float_data)
}
inline ::robot_service::Float32* Float32Response::release_float_data() {
  
  ::robot_service::Float32* temp = float_data_;
  float_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::robot_service::Float32* Float32Response::unsafe_arena_release_float_data() {
  // @@protoc_insertion_point(field_release:robot_service.Float32Response.float_data)
  
  ::robot_service::Float32* temp = float_data_;
  float_data_ = nullptr;
  return temp;
}
inline ::robot_service::Float32* Float32Response::_internal_mutable_float_data() {
  
  if (float_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::robot_service::Float32>(GetArenaForAllocation());
    float_data_ = p;
  }
  return float_data_;
}
inline ::robot_service::Float32* Float32Response::mutable_float_data() {
  ::robot_service::Float32* _msg = _internal_mutable_float_data();
  // @@protoc_insertion_point(field_mutable:robot_service.Float32Response.float_data)
  return _msg;
}
inline void Float32Response::set_allocated_float_data(::robot_service::Float32* float_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(float_data_);
  }
  if (float_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(float_data));
    if (message_arena != submessage_arena) {
      float_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, float_data, submessage_arena);
    }
    
  } else {
    
  }
  float_data_ = float_data;
  // @@protoc_insertion_point(field_set_allocated:robot_service.Float32Response.float_data)
}

// -------------------------------------------------------------------

// PoseResponse

// .robot_service.Pose pose = 1;
inline bool PoseResponse::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool PoseResponse::has_pose() const {
  return _internal_has_pose();
}
inline const ::robot_service::Pose& PoseResponse::_internal_pose() const {
  const ::robot_service::Pose* p = pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::robot_service::Pose&>(
      ::robot_service::_Pose_default_instance_);
}
inline const ::robot_service::Pose& PoseResponse::pose() const {
  // @@protoc_insertion_point(field_get:robot_service.PoseResponse.pose)
  return _internal_pose();
}
inline void PoseResponse::unsafe_arena_set_allocated_pose(
    ::robot_service::Pose* pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:robot_service.PoseResponse.pose)
}
inline ::robot_service::Pose* PoseResponse::release_pose() {
  
  ::robot_service::Pose* temp = pose_;
  pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::robot_service::Pose* PoseResponse::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:robot_service.PoseResponse.pose)
  
  ::robot_service::Pose* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::robot_service::Pose* PoseResponse::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::robot_service::Pose>(GetArenaForAllocation());
    pose_ = p;
  }
  return pose_;
}
inline ::robot_service::Pose* PoseResponse::mutable_pose() {
  ::robot_service::Pose* _msg = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:robot_service.PoseResponse.pose)
  return _msg;
}
inline void PoseResponse::set_allocated_pose(::robot_service::Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose));
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:robot_service.PoseResponse.pose)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace robot_service

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_robot_5fservice_2eproto
