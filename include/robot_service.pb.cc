// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robot_service.proto

#include "robot_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace robot_service {
constexpr Float32Request::Float32Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : float_data_(nullptr){}
struct Float32RequestDefaultTypeInternal {
  constexpr Float32RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Float32RequestDefaultTypeInternal() {}
  union {
    Float32Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Float32RequestDefaultTypeInternal _Float32Request_default_instance_;
constexpr PoseRequest::PoseRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pose_(nullptr){}
struct PoseRequestDefaultTypeInternal {
  constexpr PoseRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PoseRequestDefaultTypeInternal() {}
  union {
    PoseRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PoseRequestDefaultTypeInternal _PoseRequest_default_instance_;
constexpr Float32Response::Float32Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : float_data_(nullptr){}
struct Float32ResponseDefaultTypeInternal {
  constexpr Float32ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Float32ResponseDefaultTypeInternal() {}
  union {
    Float32Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Float32ResponseDefaultTypeInternal _Float32Response_default_instance_;
constexpr PoseResponse::PoseResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pose_(nullptr){}
struct PoseResponseDefaultTypeInternal {
  constexpr PoseResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PoseResponseDefaultTypeInternal() {}
  union {
    PoseResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PoseResponseDefaultTypeInternal _PoseResponse_default_instance_;
}  // namespace robot_service
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_robot_5fservice_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_robot_5fservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_robot_5fservice_2eproto = nullptr;

const uint32_t TableStruct_robot_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::robot_service::Float32Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::robot_service::Float32Request, float_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::robot_service::PoseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::robot_service::PoseRequest, pose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::robot_service::Float32Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::robot_service::Float32Response, float_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::robot_service::PoseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::robot_service::PoseResponse, pose_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::robot_service::Float32Request)},
  { 7, -1, -1, sizeof(::robot_service::PoseRequest)},
  { 14, -1, -1, sizeof(::robot_service::Float32Response)},
  { 21, -1, -1, sizeof(::robot_service::PoseResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::robot_service::_Float32Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::robot_service::_PoseRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::robot_service::_Float32Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::robot_service::_PoseResponse_default_instance_),
};

const char descriptor_table_protodef_robot_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023robot_service.proto\022\rrobot_service\032\016st"
  "d_msgs.proto\032\016nav_msgs.proto\"<\n\016Float32R"
  "equest\022*\n\nfloat_data\030\001 \001(\0132\026.robot_servi"
  "ce.Float32\"0\n\013PoseRequest\022!\n\004pose\030\001 \001(\0132"
  "\023.robot_service.Pose\"=\n\017Float32Response\022"
  "*\n\nfloat_data\030\001 \001(\0132\026.robot_service.Floa"
  "t32\"1\n\014PoseResponse\022!\n\004pose\030\001 \001(\0132\023.robo"
  "t_service.Pose2\354\001\n\014RobotService\022K\n\nGetFl"
  "oat32\022\035.robot_service.Float32Request\032\036.r"
  "obot_service.Float32Response\022K\n\nSetFloat"
  "32\022\035.robot_service.Float32Request\032\036.robo"
  "t_service.Float32Response\022B\n\007SetPose\022\032.r"
  "obot_service.PoseRequest\032\033.robot_service"
  ".PoseResponseb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_robot_5fservice_2eproto_deps[2] = {
  &::descriptor_table_nav_5fmsgs_2eproto,
  &::descriptor_table_std_5fmsgs_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_robot_5fservice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_robot_5fservice_2eproto = {
  false, false, 541, descriptor_table_protodef_robot_5fservice_2eproto, "robot_service.proto", 
  &descriptor_table_robot_5fservice_2eproto_once, descriptor_table_robot_5fservice_2eproto_deps, 2, 4,
  schemas, file_default_instances, TableStruct_robot_5fservice_2eproto::offsets,
  file_level_metadata_robot_5fservice_2eproto, file_level_enum_descriptors_robot_5fservice_2eproto, file_level_service_descriptors_robot_5fservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_robot_5fservice_2eproto_getter() {
  return &descriptor_table_robot_5fservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_robot_5fservice_2eproto(&descriptor_table_robot_5fservice_2eproto);
namespace robot_service {

// ===================================================================

class Float32Request::_Internal {
 public:
  static const ::robot_service::Float32& float_data(const Float32Request* msg);
};

const ::robot_service::Float32&
Float32Request::_Internal::float_data(const Float32Request* msg) {
  return *msg->float_data_;
}
void Float32Request::clear_float_data() {
  if (GetArenaForAllocation() == nullptr && float_data_ != nullptr) {
    delete float_data_;
  }
  float_data_ = nullptr;
}
Float32Request::Float32Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:robot_service.Float32Request)
}
Float32Request::Float32Request(const Float32Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_float_data()) {
    float_data_ = new ::robot_service::Float32(*from.float_data_);
  } else {
    float_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:robot_service.Float32Request)
}

inline void Float32Request::SharedCtor() {
float_data_ = nullptr;
}

Float32Request::~Float32Request() {
  // @@protoc_insertion_point(destructor:robot_service.Float32Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Float32Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete float_data_;
}

void Float32Request::ArenaDtor(void* object) {
  Float32Request* _this = reinterpret_cast< Float32Request* >(object);
  (void)_this;
}
void Float32Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Float32Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Float32Request::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_service.Float32Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && float_data_ != nullptr) {
    delete float_data_;
  }
  float_data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Float32Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .robot_service.Float32 float_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_float_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Float32Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot_service.Float32Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .robot_service.Float32 float_data = 1;
  if (this->_internal_has_float_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::float_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot_service.Float32Request)
  return target;
}

size_t Float32Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot_service.Float32Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .robot_service.Float32 float_data = 1;
  if (this->_internal_has_float_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *float_data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Float32Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Float32Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Float32Request::GetClassData() const { return &_class_data_; }

void Float32Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Float32Request *>(to)->MergeFrom(
      static_cast<const Float32Request &>(from));
}


void Float32Request::MergeFrom(const Float32Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_service.Float32Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_float_data()) {
    _internal_mutable_float_data()->::robot_service::Float32::MergeFrom(from._internal_float_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Float32Request::CopyFrom(const Float32Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_service.Float32Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Float32Request::IsInitialized() const {
  return true;
}

void Float32Request::InternalSwap(Float32Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(float_data_, other->float_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Float32Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fservice_2eproto_getter, &descriptor_table_robot_5fservice_2eproto_once,
      file_level_metadata_robot_5fservice_2eproto[0]);
}

// ===================================================================

class PoseRequest::_Internal {
 public:
  static const ::robot_service::Pose& pose(const PoseRequest* msg);
};

const ::robot_service::Pose&
PoseRequest::_Internal::pose(const PoseRequest* msg) {
  return *msg->pose_;
}
void PoseRequest::clear_pose() {
  if (GetArenaForAllocation() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
PoseRequest::PoseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:robot_service.PoseRequest)
}
PoseRequest::PoseRequest(const PoseRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pose()) {
    pose_ = new ::robot_service::Pose(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:robot_service.PoseRequest)
}

inline void PoseRequest::SharedCtor() {
pose_ = nullptr;
}

PoseRequest::~PoseRequest() {
  // @@protoc_insertion_point(destructor:robot_service.PoseRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PoseRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pose_;
}

void PoseRequest::ArenaDtor(void* object) {
  PoseRequest* _this = reinterpret_cast< PoseRequest* >(object);
  (void)_this;
}
void PoseRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PoseRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PoseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_service.PoseRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PoseRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .robot_service.Pose pose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PoseRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot_service.PoseRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .robot_service.Pose pose = 1;
  if (this->_internal_has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pose(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot_service.PoseRequest)
  return target;
}

size_t PoseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot_service.PoseRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .robot_service.Pose pose = 1;
  if (this->_internal_has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PoseRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PoseRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PoseRequest::GetClassData() const { return &_class_data_; }

void PoseRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PoseRequest *>(to)->MergeFrom(
      static_cast<const PoseRequest &>(from));
}


void PoseRequest::MergeFrom(const PoseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_service.PoseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pose()) {
    _internal_mutable_pose()->::robot_service::Pose::MergeFrom(from._internal_pose());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PoseRequest::CopyFrom(const PoseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_service.PoseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseRequest::IsInitialized() const {
  return true;
}

void PoseRequest::InternalSwap(PoseRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(pose_, other->pose_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PoseRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fservice_2eproto_getter, &descriptor_table_robot_5fservice_2eproto_once,
      file_level_metadata_robot_5fservice_2eproto[1]);
}

// ===================================================================

class Float32Response::_Internal {
 public:
  static const ::robot_service::Float32& float_data(const Float32Response* msg);
};

const ::robot_service::Float32&
Float32Response::_Internal::float_data(const Float32Response* msg) {
  return *msg->float_data_;
}
void Float32Response::clear_float_data() {
  if (GetArenaForAllocation() == nullptr && float_data_ != nullptr) {
    delete float_data_;
  }
  float_data_ = nullptr;
}
Float32Response::Float32Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:robot_service.Float32Response)
}
Float32Response::Float32Response(const Float32Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_float_data()) {
    float_data_ = new ::robot_service::Float32(*from.float_data_);
  } else {
    float_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:robot_service.Float32Response)
}

inline void Float32Response::SharedCtor() {
float_data_ = nullptr;
}

Float32Response::~Float32Response() {
  // @@protoc_insertion_point(destructor:robot_service.Float32Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Float32Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete float_data_;
}

void Float32Response::ArenaDtor(void* object) {
  Float32Response* _this = reinterpret_cast< Float32Response* >(object);
  (void)_this;
}
void Float32Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Float32Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Float32Response::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_service.Float32Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && float_data_ != nullptr) {
    delete float_data_;
  }
  float_data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Float32Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .robot_service.Float32 float_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_float_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Float32Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot_service.Float32Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .robot_service.Float32 float_data = 1;
  if (this->_internal_has_float_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::float_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot_service.Float32Response)
  return target;
}

size_t Float32Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot_service.Float32Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .robot_service.Float32 float_data = 1;
  if (this->_internal_has_float_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *float_data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Float32Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Float32Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Float32Response::GetClassData() const { return &_class_data_; }

void Float32Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Float32Response *>(to)->MergeFrom(
      static_cast<const Float32Response &>(from));
}


void Float32Response::MergeFrom(const Float32Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_service.Float32Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_float_data()) {
    _internal_mutable_float_data()->::robot_service::Float32::MergeFrom(from._internal_float_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Float32Response::CopyFrom(const Float32Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_service.Float32Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Float32Response::IsInitialized() const {
  return true;
}

void Float32Response::InternalSwap(Float32Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(float_data_, other->float_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Float32Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fservice_2eproto_getter, &descriptor_table_robot_5fservice_2eproto_once,
      file_level_metadata_robot_5fservice_2eproto[2]);
}

// ===================================================================

class PoseResponse::_Internal {
 public:
  static const ::robot_service::Pose& pose(const PoseResponse* msg);
};

const ::robot_service::Pose&
PoseResponse::_Internal::pose(const PoseResponse* msg) {
  return *msg->pose_;
}
void PoseResponse::clear_pose() {
  if (GetArenaForAllocation() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
PoseResponse::PoseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:robot_service.PoseResponse)
}
PoseResponse::PoseResponse(const PoseResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pose()) {
    pose_ = new ::robot_service::Pose(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:robot_service.PoseResponse)
}

inline void PoseResponse::SharedCtor() {
pose_ = nullptr;
}

PoseResponse::~PoseResponse() {
  // @@protoc_insertion_point(destructor:robot_service.PoseResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PoseResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pose_;
}

void PoseResponse::ArenaDtor(void* object) {
  PoseResponse* _this = reinterpret_cast< PoseResponse* >(object);
  (void)_this;
}
void PoseResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PoseResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PoseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_service.PoseResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PoseResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .robot_service.Pose pose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PoseResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot_service.PoseResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .robot_service.Pose pose = 1;
  if (this->_internal_has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pose(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot_service.PoseResponse)
  return target;
}

size_t PoseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot_service.PoseResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .robot_service.Pose pose = 1;
  if (this->_internal_has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PoseResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PoseResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PoseResponse::GetClassData() const { return &_class_data_; }

void PoseResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PoseResponse *>(to)->MergeFrom(
      static_cast<const PoseResponse &>(from));
}


void PoseResponse::MergeFrom(const PoseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_service.PoseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pose()) {
    _internal_mutable_pose()->::robot_service::Pose::MergeFrom(from._internal_pose());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PoseResponse::CopyFrom(const PoseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_service.PoseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseResponse::IsInitialized() const {
  return true;
}

void PoseResponse::InternalSwap(PoseResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(pose_, other->pose_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PoseResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fservice_2eproto_getter, &descriptor_table_robot_5fservice_2eproto_once,
      file_level_metadata_robot_5fservice_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace robot_service
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::robot_service::Float32Request* Arena::CreateMaybeMessage< ::robot_service::Float32Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::robot_service::Float32Request >(arena);
}
template<> PROTOBUF_NOINLINE ::robot_service::PoseRequest* Arena::CreateMaybeMessage< ::robot_service::PoseRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::robot_service::PoseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::robot_service::Float32Response* Arena::CreateMaybeMessage< ::robot_service::Float32Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::robot_service::Float32Response >(arena);
}
template<> PROTOBUF_NOINLINE ::robot_service::PoseResponse* Arena::CreateMaybeMessage< ::robot_service::PoseResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::robot_service::PoseResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
