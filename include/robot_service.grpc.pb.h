// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: robot_service.proto
#ifndef GRPC_robot_5fservice_2eproto__INCLUDED
#define GRPC_robot_5fservice_2eproto__INCLUDED

#include "robot_service.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace robot_service {

// ========== Service Definitions ==========
class RobotService final {
 public:
  static constexpr char const* service_full_name() {
    return "robot_service.RobotService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetFloat32(::grpc::ClientContext* context, const ::robot_service::Float32Request& request, ::robot_service::Float32Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::robot_service::Float32Response>> AsyncGetFloat32(::grpc::ClientContext* context, const ::robot_service::Float32Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::robot_service::Float32Response>>(AsyncGetFloat32Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::robot_service::Float32Response>> PrepareAsyncGetFloat32(::grpc::ClientContext* context, const ::robot_service::Float32Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::robot_service::Float32Response>>(PrepareAsyncGetFloat32Raw(context, request, cq));
    }
    virtual ::grpc::Status SetFloat32(::grpc::ClientContext* context, const ::robot_service::Float32Request& request, ::robot_service::Float32Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::robot_service::Float32Response>> AsyncSetFloat32(::grpc::ClientContext* context, const ::robot_service::Float32Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::robot_service::Float32Response>>(AsyncSetFloat32Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::robot_service::Float32Response>> PrepareAsyncSetFloat32(::grpc::ClientContext* context, const ::robot_service::Float32Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::robot_service::Float32Response>>(PrepareAsyncSetFloat32Raw(context, request, cq));
    }
    virtual ::grpc::Status SetPose(::grpc::ClientContext* context, const ::robot_service::PoseRequest& request, ::robot_service::PoseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::robot_service::PoseResponse>> AsyncSetPose(::grpc::ClientContext* context, const ::robot_service::PoseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::robot_service::PoseResponse>>(AsyncSetPoseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::robot_service::PoseResponse>> PrepareAsyncSetPose(::grpc::ClientContext* context, const ::robot_service::PoseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::robot_service::PoseResponse>>(PrepareAsyncSetPoseRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetFloat32(::grpc::ClientContext* context, const ::robot_service::Float32Request* request, ::robot_service::Float32Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetFloat32(::grpc::ClientContext* context, const ::robot_service::Float32Request* request, ::robot_service::Float32Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetFloat32(::grpc::ClientContext* context, const ::robot_service::Float32Request* request, ::robot_service::Float32Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetFloat32(::grpc::ClientContext* context, const ::robot_service::Float32Request* request, ::robot_service::Float32Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetPose(::grpc::ClientContext* context, const ::robot_service::PoseRequest* request, ::robot_service::PoseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetPose(::grpc::ClientContext* context, const ::robot_service::PoseRequest* request, ::robot_service::PoseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::robot_service::Float32Response>* AsyncGetFloat32Raw(::grpc::ClientContext* context, const ::robot_service::Float32Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::robot_service::Float32Response>* PrepareAsyncGetFloat32Raw(::grpc::ClientContext* context, const ::robot_service::Float32Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::robot_service::Float32Response>* AsyncSetFloat32Raw(::grpc::ClientContext* context, const ::robot_service::Float32Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::robot_service::Float32Response>* PrepareAsyncSetFloat32Raw(::grpc::ClientContext* context, const ::robot_service::Float32Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::robot_service::PoseResponse>* AsyncSetPoseRaw(::grpc::ClientContext* context, const ::robot_service::PoseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::robot_service::PoseResponse>* PrepareAsyncSetPoseRaw(::grpc::ClientContext* context, const ::robot_service::PoseRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetFloat32(::grpc::ClientContext* context, const ::robot_service::Float32Request& request, ::robot_service::Float32Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::robot_service::Float32Response>> AsyncGetFloat32(::grpc::ClientContext* context, const ::robot_service::Float32Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::robot_service::Float32Response>>(AsyncGetFloat32Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::robot_service::Float32Response>> PrepareAsyncGetFloat32(::grpc::ClientContext* context, const ::robot_service::Float32Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::robot_service::Float32Response>>(PrepareAsyncGetFloat32Raw(context, request, cq));
    }
    ::grpc::Status SetFloat32(::grpc::ClientContext* context, const ::robot_service::Float32Request& request, ::robot_service::Float32Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::robot_service::Float32Response>> AsyncSetFloat32(::grpc::ClientContext* context, const ::robot_service::Float32Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::robot_service::Float32Response>>(AsyncSetFloat32Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::robot_service::Float32Response>> PrepareAsyncSetFloat32(::grpc::ClientContext* context, const ::robot_service::Float32Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::robot_service::Float32Response>>(PrepareAsyncSetFloat32Raw(context, request, cq));
    }
    ::grpc::Status SetPose(::grpc::ClientContext* context, const ::robot_service::PoseRequest& request, ::robot_service::PoseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::robot_service::PoseResponse>> AsyncSetPose(::grpc::ClientContext* context, const ::robot_service::PoseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::robot_service::PoseResponse>>(AsyncSetPoseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::robot_service::PoseResponse>> PrepareAsyncSetPose(::grpc::ClientContext* context, const ::robot_service::PoseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::robot_service::PoseResponse>>(PrepareAsyncSetPoseRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetFloat32(::grpc::ClientContext* context, const ::robot_service::Float32Request* request, ::robot_service::Float32Response* response, std::function<void(::grpc::Status)>) override;
      void GetFloat32(::grpc::ClientContext* context, const ::robot_service::Float32Request* request, ::robot_service::Float32Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetFloat32(::grpc::ClientContext* context, const ::robot_service::Float32Request* request, ::robot_service::Float32Response* response, std::function<void(::grpc::Status)>) override;
      void SetFloat32(::grpc::ClientContext* context, const ::robot_service::Float32Request* request, ::robot_service::Float32Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetPose(::grpc::ClientContext* context, const ::robot_service::PoseRequest* request, ::robot_service::PoseResponse* response, std::function<void(::grpc::Status)>) override;
      void SetPose(::grpc::ClientContext* context, const ::robot_service::PoseRequest* request, ::robot_service::PoseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::robot_service::Float32Response>* AsyncGetFloat32Raw(::grpc::ClientContext* context, const ::robot_service::Float32Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::robot_service::Float32Response>* PrepareAsyncGetFloat32Raw(::grpc::ClientContext* context, const ::robot_service::Float32Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::robot_service::Float32Response>* AsyncSetFloat32Raw(::grpc::ClientContext* context, const ::robot_service::Float32Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::robot_service::Float32Response>* PrepareAsyncSetFloat32Raw(::grpc::ClientContext* context, const ::robot_service::Float32Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::robot_service::PoseResponse>* AsyncSetPoseRaw(::grpc::ClientContext* context, const ::robot_service::PoseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::robot_service::PoseResponse>* PrepareAsyncSetPoseRaw(::grpc::ClientContext* context, const ::robot_service::PoseRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetFloat32_;
    const ::grpc::internal::RpcMethod rpcmethod_SetFloat32_;
    const ::grpc::internal::RpcMethod rpcmethod_SetPose_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetFloat32(::grpc::ServerContext* context, const ::robot_service::Float32Request* request, ::robot_service::Float32Response* response);
    virtual ::grpc::Status SetFloat32(::grpc::ServerContext* context, const ::robot_service::Float32Request* request, ::robot_service::Float32Response* response);
    virtual ::grpc::Status SetPose(::grpc::ServerContext* context, const ::robot_service::PoseRequest* request, ::robot_service::PoseResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFloat32 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFloat32() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetFloat32() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFloat32(::grpc::ServerContext* /*context*/, const ::robot_service::Float32Request* /*request*/, ::robot_service::Float32Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFloat32(::grpc::ServerContext* context, ::robot_service::Float32Request* request, ::grpc::ServerAsyncResponseWriter< ::robot_service::Float32Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetFloat32 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetFloat32() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SetFloat32() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFloat32(::grpc::ServerContext* /*context*/, const ::robot_service::Float32Request* /*request*/, ::robot_service::Float32Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetFloat32(::grpc::ServerContext* context, ::robot_service::Float32Request* request, ::grpc::ServerAsyncResponseWriter< ::robot_service::Float32Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetPose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetPose() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SetPose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPose(::grpc::ServerContext* /*context*/, const ::robot_service::PoseRequest* /*request*/, ::robot_service::PoseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPose(::grpc::ServerContext* context, ::robot_service::PoseRequest* request, ::grpc::ServerAsyncResponseWriter< ::robot_service::PoseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetFloat32<WithAsyncMethod_SetFloat32<WithAsyncMethod_SetPose<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetFloat32 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetFloat32() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::robot_service::Float32Request, ::robot_service::Float32Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::robot_service::Float32Request* request, ::robot_service::Float32Response* response) { return this->GetFloat32(context, request, response); }));}
    void SetMessageAllocatorFor_GetFloat32(
        ::grpc::MessageAllocator< ::robot_service::Float32Request, ::robot_service::Float32Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::robot_service::Float32Request, ::robot_service::Float32Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetFloat32() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFloat32(::grpc::ServerContext* /*context*/, const ::robot_service::Float32Request* /*request*/, ::robot_service::Float32Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFloat32(
      ::grpc::CallbackServerContext* /*context*/, const ::robot_service::Float32Request* /*request*/, ::robot_service::Float32Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetFloat32 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetFloat32() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::robot_service::Float32Request, ::robot_service::Float32Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::robot_service::Float32Request* request, ::robot_service::Float32Response* response) { return this->SetFloat32(context, request, response); }));}
    void SetMessageAllocatorFor_SetFloat32(
        ::grpc::MessageAllocator< ::robot_service::Float32Request, ::robot_service::Float32Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::robot_service::Float32Request, ::robot_service::Float32Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetFloat32() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFloat32(::grpc::ServerContext* /*context*/, const ::robot_service::Float32Request* /*request*/, ::robot_service::Float32Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetFloat32(
      ::grpc::CallbackServerContext* /*context*/, const ::robot_service::Float32Request* /*request*/, ::robot_service::Float32Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetPose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetPose() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::robot_service::PoseRequest, ::robot_service::PoseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::robot_service::PoseRequest* request, ::robot_service::PoseResponse* response) { return this->SetPose(context, request, response); }));}
    void SetMessageAllocatorFor_SetPose(
        ::grpc::MessageAllocator< ::robot_service::PoseRequest, ::robot_service::PoseResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::robot_service::PoseRequest, ::robot_service::PoseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetPose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPose(::grpc::ServerContext* /*context*/, const ::robot_service::PoseRequest* /*request*/, ::robot_service::PoseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetPose(
      ::grpc::CallbackServerContext* /*context*/, const ::robot_service::PoseRequest* /*request*/, ::robot_service::PoseResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetFloat32<WithCallbackMethod_SetFloat32<WithCallbackMethod_SetPose<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetFloat32 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFloat32() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetFloat32() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFloat32(::grpc::ServerContext* /*context*/, const ::robot_service::Float32Request* /*request*/, ::robot_service::Float32Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetFloat32 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetFloat32() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SetFloat32() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFloat32(::grpc::ServerContext* /*context*/, const ::robot_service::Float32Request* /*request*/, ::robot_service::Float32Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetPose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetPose() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SetPose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPose(::grpc::ServerContext* /*context*/, const ::robot_service::PoseRequest* /*request*/, ::robot_service::PoseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFloat32 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFloat32() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetFloat32() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFloat32(::grpc::ServerContext* /*context*/, const ::robot_service::Float32Request* /*request*/, ::robot_service::Float32Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFloat32(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetFloat32 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetFloat32() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SetFloat32() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFloat32(::grpc::ServerContext* /*context*/, const ::robot_service::Float32Request* /*request*/, ::robot_service::Float32Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetFloat32(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetPose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetPose() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SetPose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPose(::grpc::ServerContext* /*context*/, const ::robot_service::PoseRequest* /*request*/, ::robot_service::PoseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPose(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetFloat32 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetFloat32() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetFloat32(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetFloat32() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFloat32(::grpc::ServerContext* /*context*/, const ::robot_service::Float32Request* /*request*/, ::robot_service::Float32Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFloat32(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetFloat32 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetFloat32() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetFloat32(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetFloat32() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFloat32(::grpc::ServerContext* /*context*/, const ::robot_service::Float32Request* /*request*/, ::robot_service::Float32Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetFloat32(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetPose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetPose() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetPose(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetPose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPose(::grpc::ServerContext* /*context*/, const ::robot_service::PoseRequest* /*request*/, ::robot_service::PoseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetPose(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFloat32 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetFloat32() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::robot_service::Float32Request, ::robot_service::Float32Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::robot_service::Float32Request, ::robot_service::Float32Response>* streamer) {
                       return this->StreamedGetFloat32(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetFloat32() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFloat32(::grpc::ServerContext* /*context*/, const ::robot_service::Float32Request* /*request*/, ::robot_service::Float32Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFloat32(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::robot_service::Float32Request,::robot_service::Float32Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetFloat32 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetFloat32() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::robot_service::Float32Request, ::robot_service::Float32Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::robot_service::Float32Request, ::robot_service::Float32Response>* streamer) {
                       return this->StreamedSetFloat32(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetFloat32() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetFloat32(::grpc::ServerContext* /*context*/, const ::robot_service::Float32Request* /*request*/, ::robot_service::Float32Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetFloat32(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::robot_service::Float32Request,::robot_service::Float32Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetPose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetPose() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::robot_service::PoseRequest, ::robot_service::PoseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::robot_service::PoseRequest, ::robot_service::PoseResponse>* streamer) {
                       return this->StreamedSetPose(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetPose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetPose(::grpc::ServerContext* /*context*/, const ::robot_service::PoseRequest* /*request*/, ::robot_service::PoseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetPose(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::robot_service::PoseRequest,::robot_service::PoseResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetFloat32<WithStreamedUnaryMethod_SetFloat32<WithStreamedUnaryMethod_SetPose<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetFloat32<WithStreamedUnaryMethod_SetFloat32<WithStreamedUnaryMethod_SetPose<Service > > > StreamedService;
};

}  // namespace robot_service


#endif  // GRPC_robot_5fservice_2eproto__INCLUDED
