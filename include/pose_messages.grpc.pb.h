// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pose_messages.proto
#ifndef GRPC_pose_5fmessages_2eproto__INCLUDED
#define GRPC_pose_5fmessages_2eproto__INCLUDED

#include "pose_messages.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace pose_messages {

// ========== Service Definitions ==========
class PoseService final {
 public:
  static constexpr char const* service_full_name() {
    return "pose_messages.PoseService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SendPose(::grpc::ClientContext* context, const ::pose_messages::Pose& request, ::pose_messages::Pose* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pose_messages::Pose>> AsyncSendPose(::grpc::ClientContext* context, const ::pose_messages::Pose& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pose_messages::Pose>>(AsyncSendPoseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pose_messages::Pose>> PrepareAsyncSendPose(::grpc::ClientContext* context, const ::pose_messages::Pose& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pose_messages::Pose>>(PrepareAsyncSendPoseRaw(context, request, cq));
    }
    virtual ::grpc::Status SendVector(::grpc::ClientContext* context, const ::pose_messages::Vector3& request, ::pose_messages::Vector3* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pose_messages::Vector3>> AsyncSendVector(::grpc::ClientContext* context, const ::pose_messages::Vector3& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pose_messages::Vector3>>(AsyncSendVectorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pose_messages::Vector3>> PrepareAsyncSendVector(::grpc::ClientContext* context, const ::pose_messages::Vector3& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pose_messages::Vector3>>(PrepareAsyncSendVectorRaw(context, request, cq));
    }
    virtual ::grpc::Status SendQuaternion(::grpc::ClientContext* context, const ::pose_messages::Quaternion& request, ::pose_messages::Quaternion* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pose_messages::Quaternion>> AsyncSendQuaternion(::grpc::ClientContext* context, const ::pose_messages::Quaternion& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pose_messages::Quaternion>>(AsyncSendQuaternionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pose_messages::Quaternion>> PrepareAsyncSendQuaternion(::grpc::ClientContext* context, const ::pose_messages::Quaternion& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pose_messages::Quaternion>>(PrepareAsyncSendQuaternionRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void SendPose(::grpc::ClientContext* context, const ::pose_messages::Pose* request, ::pose_messages::Pose* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendPose(::grpc::ClientContext* context, const ::pose_messages::Pose* request, ::pose_messages::Pose* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SendVector(::grpc::ClientContext* context, const ::pose_messages::Vector3* request, ::pose_messages::Vector3* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendVector(::grpc::ClientContext* context, const ::pose_messages::Vector3* request, ::pose_messages::Vector3* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SendQuaternion(::grpc::ClientContext* context, const ::pose_messages::Quaternion* request, ::pose_messages::Quaternion* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendQuaternion(::grpc::ClientContext* context, const ::pose_messages::Quaternion* request, ::pose_messages::Quaternion* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pose_messages::Pose>* AsyncSendPoseRaw(::grpc::ClientContext* context, const ::pose_messages::Pose& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pose_messages::Pose>* PrepareAsyncSendPoseRaw(::grpc::ClientContext* context, const ::pose_messages::Pose& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pose_messages::Vector3>* AsyncSendVectorRaw(::grpc::ClientContext* context, const ::pose_messages::Vector3& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pose_messages::Vector3>* PrepareAsyncSendVectorRaw(::grpc::ClientContext* context, const ::pose_messages::Vector3& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pose_messages::Quaternion>* AsyncSendQuaternionRaw(::grpc::ClientContext* context, const ::pose_messages::Quaternion& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pose_messages::Quaternion>* PrepareAsyncSendQuaternionRaw(::grpc::ClientContext* context, const ::pose_messages::Quaternion& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SendPose(::grpc::ClientContext* context, const ::pose_messages::Pose& request, ::pose_messages::Pose* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pose_messages::Pose>> AsyncSendPose(::grpc::ClientContext* context, const ::pose_messages::Pose& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pose_messages::Pose>>(AsyncSendPoseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pose_messages::Pose>> PrepareAsyncSendPose(::grpc::ClientContext* context, const ::pose_messages::Pose& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pose_messages::Pose>>(PrepareAsyncSendPoseRaw(context, request, cq));
    }
    ::grpc::Status SendVector(::grpc::ClientContext* context, const ::pose_messages::Vector3& request, ::pose_messages::Vector3* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pose_messages::Vector3>> AsyncSendVector(::grpc::ClientContext* context, const ::pose_messages::Vector3& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pose_messages::Vector3>>(AsyncSendVectorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pose_messages::Vector3>> PrepareAsyncSendVector(::grpc::ClientContext* context, const ::pose_messages::Vector3& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pose_messages::Vector3>>(PrepareAsyncSendVectorRaw(context, request, cq));
    }
    ::grpc::Status SendQuaternion(::grpc::ClientContext* context, const ::pose_messages::Quaternion& request, ::pose_messages::Quaternion* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pose_messages::Quaternion>> AsyncSendQuaternion(::grpc::ClientContext* context, const ::pose_messages::Quaternion& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pose_messages::Quaternion>>(AsyncSendQuaternionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pose_messages::Quaternion>> PrepareAsyncSendQuaternion(::grpc::ClientContext* context, const ::pose_messages::Quaternion& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pose_messages::Quaternion>>(PrepareAsyncSendQuaternionRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SendPose(::grpc::ClientContext* context, const ::pose_messages::Pose* request, ::pose_messages::Pose* response, std::function<void(::grpc::Status)>) override;
      void SendPose(::grpc::ClientContext* context, const ::pose_messages::Pose* request, ::pose_messages::Pose* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendVector(::grpc::ClientContext* context, const ::pose_messages::Vector3* request, ::pose_messages::Vector3* response, std::function<void(::grpc::Status)>) override;
      void SendVector(::grpc::ClientContext* context, const ::pose_messages::Vector3* request, ::pose_messages::Vector3* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendQuaternion(::grpc::ClientContext* context, const ::pose_messages::Quaternion* request, ::pose_messages::Quaternion* response, std::function<void(::grpc::Status)>) override;
      void SendQuaternion(::grpc::ClientContext* context, const ::pose_messages::Quaternion* request, ::pose_messages::Quaternion* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::pose_messages::Pose>* AsyncSendPoseRaw(::grpc::ClientContext* context, const ::pose_messages::Pose& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pose_messages::Pose>* PrepareAsyncSendPoseRaw(::grpc::ClientContext* context, const ::pose_messages::Pose& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pose_messages::Vector3>* AsyncSendVectorRaw(::grpc::ClientContext* context, const ::pose_messages::Vector3& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pose_messages::Vector3>* PrepareAsyncSendVectorRaw(::grpc::ClientContext* context, const ::pose_messages::Vector3& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pose_messages::Quaternion>* AsyncSendQuaternionRaw(::grpc::ClientContext* context, const ::pose_messages::Quaternion& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pose_messages::Quaternion>* PrepareAsyncSendQuaternionRaw(::grpc::ClientContext* context, const ::pose_messages::Quaternion& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SendPose_;
    const ::grpc::internal::RpcMethod rpcmethod_SendVector_;
    const ::grpc::internal::RpcMethod rpcmethod_SendQuaternion_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SendPose(::grpc::ServerContext* context, const ::pose_messages::Pose* request, ::pose_messages::Pose* response);
    virtual ::grpc::Status SendVector(::grpc::ServerContext* context, const ::pose_messages::Vector3* request, ::pose_messages::Vector3* response);
    virtual ::grpc::Status SendQuaternion(::grpc::ServerContext* context, const ::pose_messages::Quaternion* request, ::pose_messages::Quaternion* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SendPose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendPose() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SendPose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendPose(::grpc::ServerContext* /*context*/, const ::pose_messages::Pose* /*request*/, ::pose_messages::Pose* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendPose(::grpc::ServerContext* context, ::pose_messages::Pose* request, ::grpc::ServerAsyncResponseWriter< ::pose_messages::Pose>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendVector : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendVector() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SendVector() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendVector(::grpc::ServerContext* /*context*/, const ::pose_messages::Vector3* /*request*/, ::pose_messages::Vector3* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendVector(::grpc::ServerContext* context, ::pose_messages::Vector3* request, ::grpc::ServerAsyncResponseWriter< ::pose_messages::Vector3>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendQuaternion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendQuaternion() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SendQuaternion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendQuaternion(::grpc::ServerContext* /*context*/, const ::pose_messages::Quaternion* /*request*/, ::pose_messages::Quaternion* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendQuaternion(::grpc::ServerContext* context, ::pose_messages::Quaternion* request, ::grpc::ServerAsyncResponseWriter< ::pose_messages::Quaternion>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SendPose<WithAsyncMethod_SendVector<WithAsyncMethod_SendQuaternion<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SendPose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendPose() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::pose_messages::Pose, ::pose_messages::Pose>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::pose_messages::Pose* request, ::pose_messages::Pose* response) { return this->SendPose(context, request, response); }));}
    void SetMessageAllocatorFor_SendPose(
        ::grpc::MessageAllocator< ::pose_messages::Pose, ::pose_messages::Pose>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::pose_messages::Pose, ::pose_messages::Pose>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendPose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendPose(::grpc::ServerContext* /*context*/, const ::pose_messages::Pose* /*request*/, ::pose_messages::Pose* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendPose(
      ::grpc::CallbackServerContext* /*context*/, const ::pose_messages::Pose* /*request*/, ::pose_messages::Pose* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendVector : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendVector() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::pose_messages::Vector3, ::pose_messages::Vector3>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::pose_messages::Vector3* request, ::pose_messages::Vector3* response) { return this->SendVector(context, request, response); }));}
    void SetMessageAllocatorFor_SendVector(
        ::grpc::MessageAllocator< ::pose_messages::Vector3, ::pose_messages::Vector3>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::pose_messages::Vector3, ::pose_messages::Vector3>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendVector() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendVector(::grpc::ServerContext* /*context*/, const ::pose_messages::Vector3* /*request*/, ::pose_messages::Vector3* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendVector(
      ::grpc::CallbackServerContext* /*context*/, const ::pose_messages::Vector3* /*request*/, ::pose_messages::Vector3* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendQuaternion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendQuaternion() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::pose_messages::Quaternion, ::pose_messages::Quaternion>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::pose_messages::Quaternion* request, ::pose_messages::Quaternion* response) { return this->SendQuaternion(context, request, response); }));}
    void SetMessageAllocatorFor_SendQuaternion(
        ::grpc::MessageAllocator< ::pose_messages::Quaternion, ::pose_messages::Quaternion>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::pose_messages::Quaternion, ::pose_messages::Quaternion>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendQuaternion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendQuaternion(::grpc::ServerContext* /*context*/, const ::pose_messages::Quaternion* /*request*/, ::pose_messages::Quaternion* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendQuaternion(
      ::grpc::CallbackServerContext* /*context*/, const ::pose_messages::Quaternion* /*request*/, ::pose_messages::Quaternion* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SendPose<WithCallbackMethod_SendVector<WithCallbackMethod_SendQuaternion<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SendPose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendPose() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SendPose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendPose(::grpc::ServerContext* /*context*/, const ::pose_messages::Pose* /*request*/, ::pose_messages::Pose* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendVector : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendVector() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SendVector() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendVector(::grpc::ServerContext* /*context*/, const ::pose_messages::Vector3* /*request*/, ::pose_messages::Vector3* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendQuaternion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendQuaternion() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SendQuaternion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendQuaternion(::grpc::ServerContext* /*context*/, const ::pose_messages::Quaternion* /*request*/, ::pose_messages::Quaternion* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendPose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendPose() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SendPose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendPose(::grpc::ServerContext* /*context*/, const ::pose_messages::Pose* /*request*/, ::pose_messages::Pose* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendPose(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendVector : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendVector() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SendVector() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendVector(::grpc::ServerContext* /*context*/, const ::pose_messages::Vector3* /*request*/, ::pose_messages::Vector3* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendVector(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendQuaternion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendQuaternion() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SendQuaternion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendQuaternion(::grpc::ServerContext* /*context*/, const ::pose_messages::Quaternion* /*request*/, ::pose_messages::Quaternion* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendQuaternion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendPose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendPose() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendPose(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendPose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendPose(::grpc::ServerContext* /*context*/, const ::pose_messages::Pose* /*request*/, ::pose_messages::Pose* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendPose(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendVector : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendVector() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendVector(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendVector() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendVector(::grpc::ServerContext* /*context*/, const ::pose_messages::Vector3* /*request*/, ::pose_messages::Vector3* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendVector(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendQuaternion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendQuaternion() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendQuaternion(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendQuaternion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendQuaternion(::grpc::ServerContext* /*context*/, const ::pose_messages::Quaternion* /*request*/, ::pose_messages::Quaternion* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendQuaternion(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendPose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendPose() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pose_messages::Pose, ::pose_messages::Pose>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::pose_messages::Pose, ::pose_messages::Pose>* streamer) {
                       return this->StreamedSendPose(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendPose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendPose(::grpc::ServerContext* /*context*/, const ::pose_messages::Pose* /*request*/, ::pose_messages::Pose* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendPose(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pose_messages::Pose,::pose_messages::Pose>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendVector : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendVector() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pose_messages::Vector3, ::pose_messages::Vector3>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::pose_messages::Vector3, ::pose_messages::Vector3>* streamer) {
                       return this->StreamedSendVector(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendVector() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendVector(::grpc::ServerContext* /*context*/, const ::pose_messages::Vector3* /*request*/, ::pose_messages::Vector3* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendVector(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pose_messages::Vector3,::pose_messages::Vector3>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendQuaternion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendQuaternion() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pose_messages::Quaternion, ::pose_messages::Quaternion>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::pose_messages::Quaternion, ::pose_messages::Quaternion>* streamer) {
                       return this->StreamedSendQuaternion(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendQuaternion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendQuaternion(::grpc::ServerContext* /*context*/, const ::pose_messages::Quaternion* /*request*/, ::pose_messages::Quaternion* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendQuaternion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pose_messages::Quaternion,::pose_messages::Quaternion>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SendPose<WithStreamedUnaryMethod_SendVector<WithStreamedUnaryMethod_SendQuaternion<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SendPose<WithStreamedUnaryMethod_SendVector<WithStreamedUnaryMethod_SendQuaternion<Service > > > StreamedService;
};

}  // namespace pose_messages


#endif  // GRPC_pose_5fmessages_2eproto__INCLUDED
